// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  phone     String?  // Teléfono opcional
  role      String   // valores: "CLIENT", "ADMIN", "SUPER_ADMIN"
  isActive  Boolean  @default(true) // Estado de la cuenta
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  bookings     Booking[]
  payments     Payment[]
  notifications Notification[]
  resources    Resource[]
  
  @@map("users")
}

model Resource {
  id             Int      @id @default(autoincrement())
  name           String
  description    String?
  capacity       String?      // Para espacios: "10x2", para máquinas: "Hasta 5cm acero"
  specifications String       // JSON serializado como string
  pricePerHour   Float?       // Nuevo campo opcional
  location       String?      // Ubicación opcional
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  type           String       // valores: "STORAGE_SPACE", "LASER_MACHINE"  (renombrado de resourceType)
  ownerId        Int?         // Propietario (admin que lo creó)
  owner          User?        @relation(fields: [ownerId], references: [id])

  // Relaciones
  images   ResourceImage[]
  bookings Booking[]

  @@map("resources")
}

model ResourceImage {
  id         Int      @id @default(autoincrement())
  url        String
  resourceId Int
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  
  @@map("resource_images")
}

model Booking {
  id         Int      @id @default(autoincrement())
  userId     Int
  resourceId Int
  startDate  DateTime
  endDate    DateTime
  totalHours Float?
  totalPrice Float?
  notes      String?
  status     String   // valores: "PENDING", "CONFIRMED", "IN_PROGRESS", "COMPLETED", "CANCELLED", "REFUNDED"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relaciones
  user     User      @relation(fields: [userId], references: [id])
  resource Resource  @relation(fields: [resourceId], references: [id])
  payments Payment[]
  
  @@map("bookings")
}

model Payment {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookingId Int
  amount    Float
  status    String   // valores: "PENDING", "COMPLETED", "FAILED", "REFUNDED"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  user    User    @relation(fields: [userId], references: [id])
  booking Booking @relation(fields: [bookingId], references: [id])
  
  @@map("payments")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  type      String   // valores: "BOOKING_CONFIRMED", "BOOKING_REMINDER", "PAYMENT_RECEIVED", "MAINTENANCE_ALERT", "GENERAL"
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relaciones
  user User @relation(fields: [userId], references: [id])
  
  @@map("notifications")
}